Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2020-09-06T22:58:25+10:00

====== Getting Started ======

== Dependancies ==

In order to build your first server, you will need to import Minestom as a dependancy.

Adding Minestom to your gradle java project is really simple, the only thing you need is to add the JitPack repository:

--------------------
repositories {
	maven { url 'https://jitpack.io' }
}
--------------------



And add the wanted Minestom version to your dependencies (https://jitpack.io/#Minestom/Minestom):
Make sure to replace COMMIT_NUMBER with the Commit ID of your wanted Github Commit (Normally Latest)

--------------------
dependencies {
	compile 'com.github.Minestom:Minestom:COMMIT_NUMBER'
}
--------------------

Warning: Minestom needs Java 11 or newer in order to run




Some things are needed before being able to connect to your Minestom server.

1. Initialize the server
2. Registering events/commands
3. Start the server at the specified port and address

Here is a correct example:

--------------------
	public static void main(String[] args) {
		 // Initialize the server (Must be called once at start of project)
		MinecraftServer minecraftServer = MinecraftServer.init();

		 // REGISTER EVENTS e.g. set spawn instance, teleport player at spawn

		 // Start the server
		minecraftServer.start("localhost", 55555);
	}
--------------------

However even after those steps, you will not be able to connect, what we miss here is an instance (the world)

Please check the instances and events pages if you have any question of how to create/listen to one

Here is an example of a working Minestom server

--------------------
package your.package;

import net.minestom.server.MinecraftServer;
import net.minestom.server.event.player.PlayerLoginEvent;
import net.minestom.server.event.player.PlayerSpawnEvent;
import net.minestom.server.instance.*;
import net.minestom.server.instance.batch.ChunkBatch;
import net.minestom.server.instance.block.Block;
import net.minestom.server.network.ConnectionManager;
import net.minestom.server.utils.Position;

import java.util.Arrays;
import java.util.List;

public class MainDemo {

	public static void main(String[] args) {
		// Initialization
		MinecraftServer minecraftServer = MinecraftServer.init();

		InstanceManager instanceManager = MinecraftServer.getInstanceManager();
		// Create the instance
		InstanceContainer instanceContainer = instanceManager.createInstanceContainer();
		// Set the ChunkGenerator
		instanceContainer.setChunkGenerator(new GeneratorDemo());
		// Enable the auto chunk loading (when players come close)
		instanceContainer.enableAutoChunkLoad(true);

		// Add event listeners
		ConnectionManager connectionManager = MinecraftServer.getConnectionManager();
		connectionManager.addPlayerInitialization(player -> {
			// Set the spawning instance
			player.addEventCallback(PlayerLoginEvent.class, event -> {
				event.setSpawningInstance(instanceContainer);
			});

			// Teleport the player at spawn
			player.addEventCallback(PlayerSpawnEvent.class, event -> {
				player.teleport(new Position(0, 45, 0));
			});
		});

		// Start the server
		minecraftServer.start("localhost", 55555);
	}

	private static class GeneratorDemo extends ChunkGenerator {

		@Override
		public void generateChunkData(ChunkBatch batch, int chunkX, int chunkZ) {
			// Set chunk blocks
			for (byte x = 0; x < Chunk.CHUNK_SIZE_X; x++)
				for (byte z = 0; z < Chunk.CHUNK_SIZE_Z; z++) {
					for (byte y = 0; y < 40; y++) {
						batch.setBlock(x, y, z, Block.STONE);
					}
				}
		}

		@Override
		public void fillBiomes(Biome[] biomes, int chunkX, int chunkZ) {
			Arrays.fill(biomes, Biome.PLAINS);
		}

		@Override
		public List<ChunkPopulator> getPopulators() {
			return null;
		}
	}

}
--------------------
